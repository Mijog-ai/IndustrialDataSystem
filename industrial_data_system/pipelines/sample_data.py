"""Data pipeline helpers for generating sample Industrial Data System assets."""

from __future__ import annotations

from pathlib import Path
from typing import Dict, List

from industrial_data_system.core.auth import LocalAuthStore, UploadHistoryStore
from industrial_data_system.core.config import get_config
from industrial_data_system.core.db_manager import DatabaseManager
from industrial_data_system.core.storage import LocalStorageManager, StorageError

DEFAULT_PUMP_SERIES = "Sample Series"
SAMPLE_USER_EMAIL = "sample_uploader@example.com"


class SampleDataResult(Dict[str, object]):
    """Dictionary describing the artefacts generated by ``create_sample_dataset``."""

    user_id: int
    uploads_created: int
    user_created: bool
    files: List[str]


def create_sample_dataset(base_dir: Path | None = None) -> SampleDataResult:
    """Populate the local environment with synthetic uploads for demonstrations."""

    config = get_config()
    manager = DatabaseManager()
    storage = LocalStorageManager(config=config, database=manager)
    auth_store = LocalAuthStore(manager)
    history_store = UploadHistoryStore(manager)

    base_dir = base_dir or Path(__file__).resolve().parent / "sample_data"
    base_dir.mkdir(exist_ok=True)

    try:
        user = auth_store.create_user(
            SAMPLE_USER_EMAIL,
            "sample",
            metadata={"display_name": "Sample Uploader"},
        )
        user_created = True
    except ValueError:
        user = auth_store.authenticate(SAMPLE_USER_EMAIL, "sample")
        if not user:
            raise RuntimeError("Unable to create or authenticate the sample user.")
        user_created = False

    sample_types = {
        "Vibration": "Vibration analysis data",
        "Temperature": "Temperature monitoring",
    }

    manager.ensure_pump_series(
        DEFAULT_PUMP_SERIES, "Sample pump series for demonstration"
    )

    for name, description in sample_types.items():
        manager.ensure_test_type(name, description, pump_series=DEFAULT_PUMP_SERIES)

    stored_files: List[str] = []
    uploads_created = 0
    for test_type, description in sample_types.items():
        sample_file = base_dir / f"{test_type.lower()}_sample.csv"
        sample_file.write_text(
            "timestamp,value\n2024-01-01T00:00:00Z,42\n", encoding="utf-8"
        )
        try:
            stored = storage.upload_file(sample_file, DEFAULT_PUMP_SERIES, test_type)
        except StorageError:
            continue
        history_store.add_record(
            user_id=user.id,
            filename=stored.absolute_path.name,
            file_path=str(stored.relative_path),
            pump_series=DEFAULT_PUMP_SERIES,
            test_type=test_type,
            file_size=stored.size_bytes,
            description=description,
        )
        uploads_created += 1
        stored_files.append(str(stored.absolute_path))

    return SampleDataResult(
        user_id=user.id,
        uploads_created=uploads_created,
        user_created=user_created,
        files=stored_files,
    )


__all__ = ["create_sample_dataset", "SampleDataResult"]
